# user_chats.py

from aiogram import Router, F, Bot
from aiogram.enums import ChatType, ChatMemberStatus
from aiogram.types import (
    Message, CallbackQuery, InlineKeyboardMarkup,
    InlineKeyboardButton, ChatMemberUpdated
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.filters import ChatMemberUpdatedFilter, JOIN_TRANSITION

from loader import bot
from db import (
    get_user_chats,
    remove_user_chat,
    get_link_filter,    set_link_filter,
    get_caps_filter,    set_caps_filter,
    get_spam_filter,    set_spam_filter,
    get_swear_filter,   set_swear_filter,
    get_keywords_filter,set_keywords_filter,
    set_welcome_message, get_welcome_message,
    set_rules,          get_rules,
    get_sticker_filter, set_sticker_filter,
    get_log_settings,   set_log_chat,
    update_log_status
)
from services.logger import send_log

router = Router()

# --- FSM –¥–ª—è Welcome, Rules –∏ Logging ---
class WelcomeStates(StatesGroup):
    waiting_for_welcome = State()

class RulesStates(StatesGroup):
    waiting_for_rules = State()

class LoggingStates(StatesGroup):
    waiting_for_log_chat_id = State()


async def is_admin_in_chat(chat_id: int, user_id: int) -> bool:
    try:
        member = await bot.get_chat_member(chat_id, user_id)
        return member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except Exception:
        return False


# 1) –ú–æ–∏ —á–∞—Ç—ã (–ø—Ä–∏–≤–∞—Ç)
@router.message(F.text.lower() == "–º–æ–∏ —á–∞—Ç—ã", F.chat.type == ChatType.PRIVATE)
async def cmd_my_chats(message: Message):
    user_id = message.from_user.id
    uc = get_user_chats(user_id)
    if not uc:
        return await message.answer(
            "–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —á–∞—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É ¬´—É—Å—Ç–∞–Ω–æ–≤–∫–∞¬ª",
            parse_mode="Markdown"
        )

    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=name, callback_data=f"manage_uc:{chat_id}")]
            for chat_id, name in uc.items()
        ]
    )
    await message.answer("–í–∞—à–∏ —á–∞—Ç—ã:", reply_markup=kb)


# 2) –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω—ã–º —á–∞—Ç–æ–º
@router.callback_query(F.data.startswith("manage_uc:"))
async def callback_manage_uc(cq: CallbackQuery):
    chat_id = int(cq.data.split(":", 1)[1])

    # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–∞–º–æ–≥–æ —É–ø—Ä–∞–≤–ª—è–µ–º–æ–≥–æ —á–∞—Ç–∞
    try:
        target_chat = await bot.get_chat(chat_id)
        chat_title = target_chat.title or target_chat.username or str(chat_id)
    except Exception:
        chat_title = str(chat_id)

    # –î–∞–ª—å—à–µ —Å–æ–±–∏—Ä–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    settings = get_log_settings(chat_id) or {}
    log_chat_id = settings.get("log_chat_id")
    logging_enabled = settings.get("is_logging_enabled", False)

    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ª–æ–≥–æ–≤ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    if log_chat_id:
        try:
            log_chat = await bot.get_chat(log_chat_id)
            log_title = log_chat.title or log_chat.username or str(log_chat_id)
        except Exception:
            log_title = str(log_chat_id)
    else:
        log_title = None

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if logging_enabled and log_title:
        log_btn_text = f"üîî –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –í–∫–ª ({log_title})"
    else:
        log_btn_text = "üîï –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ: –í—ã–∫–ª"

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫",     callback_data=f"filter_links:{chat_id}")],
        [InlineKeyboardButton(text="–ê–Ω—Ç–∏–∫–∞–ø—Å",              callback_data=f"filter_caps:{chat_id}")],
        [InlineKeyboardButton(text="–ê–Ω—Ç–∏—Å–ø–∞–º",              callback_data=f"filter_spam:{chat_id}")],
        [InlineKeyboardButton(text="–ê–Ω—Ç–∏—Å–ø–∞–º —Å—Ç–∏–∫–µ—Ä–æ–≤",     callback_data=f"filter_stickers:{chat_id}")],
        [InlineKeyboardButton(text="–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—Ç–∞",       callback_data=f"filter_swear:{chat_id}")],
        [InlineKeyboardButton(text="–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞",        callback_data=f"filter_keywords:{chat_id}")],
        [InlineKeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è", callback_data=f"setup_welcome:{chat_id}")],
        [InlineKeyboardButton(text="–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª",      callback_data=f"setup_rules:{chat_id}")],
        [InlineKeyboardButton(text=log_btn_text,            callback_data=f"logging:{chat_id}")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å —á–∞—Ç",         callback_data=f"delete_chat:{chat_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_chats")],
    ], row_width=1)

    await cq.message.edit_text(
        f"–ß—Ç–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤ —á–∞—Ç–µ <b>{chat_title}</b>?",
        parse_mode="HTML",
        reply_markup=kb
    )
    await cq.answer()


# 3) –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä—ã —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º
def _make_filter_handler(prefix: str, get_fn, set_fn, on_text: str, off_text: str):
    async def handler(cq: CallbackQuery):
        chat_id = int(cq.data.split(":", 1)[1])
        cur = get_fn(chat_id)
        new = not cur
        set_fn(chat_id, new)
        await cq.answer(f"{prefix} {'‚úÖ ' + on_text if new else '‚ùå ' + off_text}", show_alert=True)
        await send_log(
            bot, chat_id,
            f"‚öôÔ∏è {prefix} {'–≤–∫–ª—é—á–µ–Ω–æ' if new else '–æ—Ç–∫–ª—é—á–µ–Ω–æ'} –∞–¥–º–∏–Ω–æ–º "
            f"{cq.from_user.full_name} (@{cq.from_user.username or '‚Äî'})"
        )
    return handler

router.callback_query(F.data.startswith("filter_links:"))( 
    _make_filter_handler("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Å—Å—ã–ª–æ–∫",
                         get_link_filter, set_link_filter,
                         "–í–∫–ª—é—á–µ–Ω–∞", "–í—ã–∫–ª—é—á–µ–Ω–∞") )
router.callback_query(F.data.startswith("filter_caps:"))(
    _make_filter_handler("–ê–Ω—Ç–∏–∫–∞–ø—Å",
                         get_caps_filter, set_caps_filter,
                         "–í–∫–ª—é—á—ë–Ω", "–í—ã–∫–ª—é—á—ë–Ω") )
router.callback_query(F.data.startswith("filter_spam:"))(
    _make_filter_handler("–ê–Ω—Ç–∏—Å–ø–∞–º",
                         get_spam_filter, set_spam_filter,
                         "–í–∫–ª—é—á—ë–Ω", "–í—ã–∫–ª—é—á—ë–Ω") )
router.callback_query(F.data.startswith("filter_stickers:"))(
    _make_filter_handler("–ê–Ω—Ç–∏—Å–ø–∞–º —Å—Ç–∏–∫–µ—Ä–æ–≤",
                         get_sticker_filter, set_sticker_filter,
                         "–í–∫–ª—é—á—ë–Ω", "–í—ã–∫–ª—é—á—ë–Ω") )
router.callback_query(F.data.startswith("filter_swear:"))(
    _make_filter_handler("–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞—Ç–∞",
                         get_swear_filter, set_swear_filter,
                         "–í–∫–ª—é—á–µ–Ω–∞", "–í—ã–∫–ª—é—á–µ–Ω–∞") )
router.callback_query(F.data.startswith("filter_keywords:"))(
    _make_filter_handler("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞",
                         get_keywords_filter, set_keywords_filter,
                         "–í–∫–ª—é—á–µ–Ω—ã", "–í—ã–∫–ª—é—á–µ–Ω—ã") )


# 4) –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
@router.callback_query(F.data.startswith("setup_welcome:"))
async def callback_setup_welcome(cq: CallbackQuery, state: FSMContext):
    chat_id = int(cq.data.split(":",1)[1])
    if not await is_admin_in_chat(chat_id, cq.from_user.id):
        return await cq.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç.", show_alert=True)
    await state.update_data(chat_id=chat_id)
    await cq.message.answer(
        "üîß –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è.\n"
        "–®–∞–±–ª–æ–Ω—ã: {first_name}, {username}, {chat_title}. HTML —Ä–∞–∑—Ä–µ—à–µ–Ω."
    )
    await state.set_state(WelcomeStates.waiting_for_welcome)
    await cq.answer()

@router.message(WelcomeStates.waiting_for_welcome)
async def process_welcome_text(message: Message, state: FSMContext):
    data   = await state.get_data(); chat_id = data['chat_id']
    text   = message.text.strip()
    set_welcome_message(chat_id, text)
    await message.answer(f"‚úÖ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ:\n\n{text}")
    await send_log(
        bot, chat_id,
        f"‚úèÔ∏è –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏–∑–º–µ–Ω–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º {message.from_user.full_name} "
        f"(@{message.from_user.username or '‚Äî'}):\n{text}"
    )
    await state.clear()


# 5) –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫
@router.chat_member(ChatMemberUpdatedFilter(JOIN_TRANSITION))
async def on_user_join(event: ChatMemberUpdated):
    if event.chat.type not in (ChatType.GROUP, ChatType.SUPERGROUP):
        return
    welcome = get_welcome_message(event.chat.id)
    user    = event.new_chat_member.user
    if welcome:
        await event.answer(
            welcome.format(
                first_name=user.first_name or "",
                username=f"@{user.username}" if user.username else "",
                chat_title=event.chat.title
            ),
            parse_mode="HTML"
        )
    await send_log(
        bot, event.chat.id,
        f"üë§ –ù–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫: {user.full_name} @{user.username or '‚Äî'} (#u{user.id})"
    )


# 6) –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∞–≤–∏–ª
@router.callback_query(F.data.startswith("setup_rules:"))
async def callback_setup_rules(cq: CallbackQuery, state: FSMContext):
    chat_id = int(cq.data.split(":",1)[1])
    if not await is_admin_in_chat(chat_id, cq.from_user.id):
        return await cq.answer("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω –º–æ–∂–µ—Ç.", show_alert=True)
    await state.update_data(chat_id=chat_id)
    current = get_rules(chat_id) or "(–Ω–µ –∑–∞–¥–∞–Ω—ã)"
    await cq.message.answer(f"üîß –¢–µ–∫—É—â–∏–µ –ø—Ä–∞–≤–∏–ª–∞:\n{current}\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–µ –ø—Ä–∞–≤–∏–ª–∞ (HTML).")
    await state.set_state(RulesStates.waiting_for_rules)
    await cq.answer()

@router.message(RulesStates.waiting_for_rules)
async def process_rules_text(message: Message, state: FSMContext):
    data   = await state.get_data(); chat_id = data['chat_id']
    text   = message.text.strip()
    set_rules(chat_id, text)
    await message.answer(f"‚úÖ –ü—Ä–∞–≤–∏–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã:\n\n{text}")
    await send_log(
        bot, chat_id,
        f"‚úèÔ∏è –ü—Ä–∞–≤–∏–ª–∞ –∏–∑–º–µ–Ω–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º {message.from_user.full_name} "
        f"(@{message.from_user.username or '‚Äî'}):\n{text}"
    )
    await state.clear()


# 7) –ö–Ω–æ–ø–∫–∞ ¬´–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ¬ª ‚Äî —Ç–µ–ø–µ—Ä—å —Å –≤–æ–ø—Ä–æ—Å–æ–º –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏
@router.callback_query(F.data.startswith("logging:"))
async def callback_logging(cq: CallbackQuery, state: FSMContext):
    chat_id   = int(cq.data.split(":",1)[1])
    settings  = get_log_settings(chat_id) or {}
    log_id    = settings.get('log_chat_id')
    enabled   = settings.get('is_logging_enabled', False)

    if not log_id:
        # –Ω–µ—Ç —á–∞—Ç–∞ ‚Äî —Å—Ä–∞–∑—É –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º ID
        await cq.message.answer(
            "üì• –í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.",
            parse_mode="HTML"
        )
        await state.update_data(chat_id=chat_id)
        await state.set_state(LoggingStates.waiting_for_log_chat_id)
        return await cq.answer()

    if not enabled:
        # –≤–∫–ª—é—á–∞–µ–º: —Å–ø—Ä–∞—à–∏–≤–∞–µ–º, —Ö–æ—Ç–∏–º –ª–∏ —Å–º–µ–Ω–∏—Ç—å —á–∞—Ç
        kb = InlineKeyboardMarkup(row_width=2, inline_keyboard=[
            [
                InlineKeyboardButton(text="–î–∞, —Å–º–µ–Ω–∏—Ç—å", callback_data=f"logging_change:yes:{chat_id}"),
                InlineKeyboardButton(text="–ù–µ—Ç, –æ—Å—Ç–∞–≤–∏—Ç—å", callback_data=f"logging_change:no:{chat_id}")
            ]
        ])
        await cq.message.answer(
            "–•–æ—Ç–∏—Ç–µ —Å–º–µ–Ω–∏—Ç—å —á–∞—Ç –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è?",
            reply_markup=kb
        )
        return await cq.answer()

    # –µ—Å–ª–∏ —É–∂–µ –≤–∫–ª—é—á–µ–Ω–æ ‚Äî –≤—ã–∫–ª—é—á–∞–µ–º —Å—Ä–∞–∑—É
    update_log_status(chat_id, False)
    await cq.answer("üîï –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ", show_alert=True)
    await send_log(
        bot, chat_id,
        f"üîï –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º {cq.from_user.full_name}"
    )
    # –æ–±–Ω–æ–≤–∏–º –º–µ–Ω—é
    await callback_manage_uc(cq)


# 8) –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´–î–∞/–ù–µ—Ç¬ª —Å–º–µ–Ω—ã —á–∞—Ç–∞
@router.callback_query(F.data.startswith("logging_change:"))
async def callback_logging_change(cq: CallbackQuery, state: FSMContext):
    _, ans, chat_id_str = cq.data.split(":")
    chat_id = int(chat_id_str)

    if ans == "yes":
        # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –≤ FSM –¥–ª—è –Ω–æ–≤–æ–≥–æ ID
        await cq.message.answer(
            "üì• –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π ID —á–∞—Ç–∞ –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.",
            parse_mode="HTML"
        )
        await state.update_data(chat_id=chat_id)
        await state.set_state(LoggingStates.waiting_for_log_chat_id)

    else:
        # –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π ID, –ø—Ä–æ—Å—Ç–æ –≤–∫–ª—é—á–∞–µ–º —Ñ–ª–∞–≥
        update_log_status(chat_id, True)
        await cq.answer("üîî –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ", show_alert=True)
        await send_log(
            bot, chat_id,
            f"üîî –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º {cq.from_user.full_name}"
        )
        await callback_manage_uc(cq)


# 9) FSM: —Å–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–π ID –∏–ª–∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º 'off'
@router.message(LoggingStates.waiting_for_log_chat_id)
async def process_log_chat_id(message: Message, state: FSMContext):
    data    = await state.get_data()
    chat_id = data["chat_id"]
    text    = message.text.strip()

    if text.lower() == "off":
        update_log_status(chat_id, False)
        await message.answer("‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
    else:
        try:
            new_id = int(text)
            await bot.send_message(new_id, "‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ.")
            set_log_chat(chat_id, new_id)
            update_log_status(chat_id, True)
            ch = await bot.get_chat(new_id)
            title = ch.title or ch.username or str(new_id)
            await message.answer(f"‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ –≤ —á–∞—Ç: {title}")
        except Exception as e:
            return await message.answer(
                f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ª–æ–≥-—á–∞—Ç: {e}"
            )

    await state.clear()
    # –æ–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
    fake = CallbackQuery(
        id=message.message_id.__str__(),
        from_user=message.from_user,
        chat_instance="",
        message=message,
        data=f"manage_uc:{chat_id}"
    )
    await callback_manage_uc(fake)


# 10) –£–¥–∞–ª–µ–Ω–∏–µ —á–∞—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@router.callback_query(F.data.startswith("delete_chat:"))
async def callback_delete_chat(cq: CallbackQuery):
    chat_id = int(cq.data.split(":",1)[1])
    remove_user_chat(cq.from_user.id, chat_id)
    await cq.message.edit_text("–ß–∞—Ç —É–¥–∞–ª—ë–Ω –∏–∑ –≤–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞.")
    await cq.answer("–ì–æ—Ç–æ–≤–æ!")
    await send_log(
        bot, chat_id,
        f"üóëÔ∏è –ß–∞—Ç —É–¥–∞–ª—ë–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {cq.from_user.full_name}"
    )

# –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ ¬´–ù–∞–∑–∞–¥¬ª ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –≤—Å–µ—Ö —á–∞—Ç–æ–≤
@router.callback_query(F.data == "back_to_chats")
async def callback_back_to_chats(cq: CallbackQuery):
    user_id = cq.from_user.id
    uc = get_user_chats(user_id)
    if not uc:
        await cq.message.edit_text(
            "–£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —á–∞—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É ¬´—É—Å—Ç–∞–Ω–æ–≤–∫–∞¬ª",
            parse_mode="Markdown"
        )
    else:
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=name, callback_data=f"manage_uc:{chat_id}")]
                for chat_id, name in uc.items()
            ]
        )
        await cq.message.edit_text("–í–∞—à–∏ —á–∞—Ç—ã:", reply_markup=kb)
    await cq.answer()


def register_handlers_user_chats(dp):
    dp.include_router(router)