import logging
from aiogram.types import Message
import sqlite3
from time import time
from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.enums import ChatType, ChatMemberStatus
from loader import bot
from db import (
    DB_NAME,
    upsert_alias, resolve_username,
    add_mute, reset_mutes,
    add_ban, reset_bans,
    reset_warns,
    add_user_chat, add_chat,
    set_rules, get_rules,
    set_welcome_delete_timeout, get_welcome_delete_timeout,
    get_keywords, add_keyword, remove_keyword
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

router = Router()

WELCOME_DELETE_DEFAULT = 60

async def is_chat_admin(message: types.Message) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º —á–∞—Ç–∞
    """
    try:
        member = await bot.get_chat_member(message.chat.id, message.from_user.id)
        return member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞: {e}")
        return False

async def get_target_user(message: types.Message, username: str | None = None) -> types.User | None:
    chat_id = message.chat.id
    # –û—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if message.reply_to_message:
        target = message.reply_to_message.from_user
        if target.username:
            upsert_alias(chat_id, target.username, target.id)
        return target
    # –ê—Ä–≥—É–º–µ–Ω—Ç username –∏–ª–∏ ID
    if username:
        target_id = resolve_username(chat_id, username.lstrip('@').lower())
        if target_id:
            try:
                member = await bot.get_chat_member(chat_id, target_id)
                return member.user
            except Exception:
                pass
        try:
            member = await bot.get_chat_member(chat_id, username)
            if member.user.username:
                upsert_alias(chat_id, member.user.username, member.user.id)
            return member.user
        except Exception:
            return None
    return None

async def process_admin_command(message: types.Message, command_type: str) -> None:
    logger.info(f"Process command {command_type} by {message.from_user.id}: {message.text}")
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –≤ —á–∞—Ç–µ
    if not await is_chat_admin(message):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
        return
    parts = message.text.split()
    username_arg = parts[1] if len(parts) > 1 else None
    target = await get_target_user(message, username_arg)
    if not target:
        await message.reply("‚ùó –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ @username (–∏–ª–∏ ID)")
        return
    try:
        member = await bot.get_chat_member(message.chat.id, target.id)
        if member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
            await message.reply("‚ùó –ù–µ–ª—å–∑—è –≤–æ–∑–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return
        # BAN / UNBAN
        if command_type == "ban":
            await bot.ban_chat_member(message.chat.id, target.id)
            add_ban(target.id, message.chat.id, target.username or target.full_name)
            await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target.username or target.first_name} –∑–∞–±–∞–Ω–µ–Ω")
        elif command_type == "unban":
            await bot.unban_chat_member(message.chat.id, target.id)
            reset_bans(target.id, message.chat.id)
            await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target.username or target.first_name} —Ä–∞–∑–±–∞–Ω–µ–Ω")
        # MUTE / UNMUTE
        elif command_type == "mute":
            restriction = 300
            if len(parts) > 2:
                try:
                    restriction = int(parts[2]) * 3600
                except ValueError:
                    await message.reply("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤.")
                    return
            await bot.restrict_chat_member(
                chat_id=message.chat.id,
                user_id=target.id,
                permissions=types.ChatPermissions(),
                until_date=int(time()) + restriction
            )
            add_mute(target.id, message.chat.id, target.username or target.full_name)
            period = f"–Ω–∞ {parts[2]} —á–∞—Å–æ–≤" if len(parts) > 2 else "–Ω–∞–≤—Å–µ–≥–¥–∞"
            await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target.username or target.first_name} –∑–∞–º—É—á–µ–Ω {period}")
        elif command_type == "unmute":
            await bot.restrict_chat_member(
                chat_id=message.chat.id,
                user_id=target.id,
                permissions=types.ChatPermissions(
                    can_send_messages=True,
                    can_send_media_messages=True,
                    can_send_other_messages=True,
                    can_add_web_page_previews=True
                )
            )
            reset_mutes(target.id, message.chat.id)
            await message.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{target.username or target.first_name} —Ä–∞–∑–º—É—á–µ–Ω")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_admin_command: {e}")
        await message.reply(f"‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

# –ü—Ä–µ—Ñ–∏–∫—Å—ã –∫–æ–º–∞–Ω–¥
PREFIXES = ("/", "!")

# –°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã ban, unban, mute, unmute, checkperms, ro
@router.message(
    Command(commands=["ban", "–±–∞–Ω"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_ban(message: types.Message):
    await process_admin_command(message, "ban")

@router.message(
    Command(commands=["unban"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_unban(message: types.Message):
    await process_admin_command(message, "unban")

@router.message(
    Command(commands=["mute"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_mute(message: types.Message):
    await process_admin_command(message, "mute")

@router.message(
    Command(commands=["unmute"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_unmute(message: types.Message):
    await process_admin_command(message, "unmute")

@router.message(
    Command(commands=["checkperms"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_checkperms(message: types.Message):
    if not await is_chat_admin(message):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
        return
    target = await get_target_user(message)
    if not target:
        await message.reply("‚ùó –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        return
    try:
        member = await bot.get_chat_member(message.chat.id, target.id)
        if member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
            await message.reply("‚ùó –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –∏–º–µ—é—Ç –≤—Å–µ –ø—Ä–∞–≤–∞")
            return
        text = (
            "üîπ –ü—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:"
            f"\n–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è: {'‚úÖ' if member.can_send_messages else '‚ùå'}"
            f"\n–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–µ–¥–∏–∞: {'‚úÖ' if member.can_send_media_messages else '‚ùå'}"
            f"\n–û—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å—Ç–∏–∫–µ—Ä—ã/–æ—Ç–∫—Ä—ã—Ç–∫–∏: {'‚úÖ' if member.can_send_other_messages else '‚ùå'}"
            f"\n–î–æ–±–∞–≤–ª—è—Ç—å –ø—Ä–µ–≤—å—é: {'‚úÖ' if member.can_add_web_page_previews else '‚ùå'}"
        )
        await message.reply(text)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ checkperms: {e}")
        await message.reply(f"‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")

@router.message(
    Command(commands=["ro"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_ro(message: types.Message):
    if not await is_chat_admin(message):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
        return
    chat = await bot.get_chat(message.chat.id)
    current = chat.permissions or types.ChatPermissions(
        can_send_messages=True,
        can_send_media_messages=True,
        can_send_other_messages=True,
        can_add_web_page_previews=True
    )
    ro_enabled = not current.can_send_messages
    perms = types.ChatPermissions(
        can_send_messages=ro_enabled,
        can_send_media_messages=ro_enabled,
        can_send_other_messages=ro_enabled,
        can_add_web_page_previews=ro_enabled
    )
    status = "–≤—ã–∫–ª—é—á–µ–Ω" if ro_enabled else "–≤–∫–ª—é—á–µ–Ω"
    await bot.set_chat_permissions(chat_id=message.chat.id, permissions=perms)
    await message.reply(f"‚úÖ Read-Only —Ä–µ–∂–∏–º {status}")

# –ù–æ–≤—ã–µ —Ö—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤–∞—Ä–Ω–æ–≤
@router.message(
    Command(commands=["resetwarn"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_resetwarn(message: types.Message):
    if not await is_chat_admin(message):
        return await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
    target = await get_target_user(message)
    if not target:
        return await message.reply("‚ùó –û—Ç–≤–µ—Ç—å—Ç–µ reply –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ @username")
    reset_warns(target.id, message.chat.id)
    display = target.username or target.full_name
    await message.reply(f"‚úÖ –í–∞—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{display} –æ–±–Ω—É–ª–µ–Ω—ã")

@router.message(
    Command(commands=["resetwarnsall"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_resetwarnsall(message: types.Message):
    if not await is_chat_admin(message):
        return await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
    conn = sqlite3.connect(DB_NAME)
    c = conn.cursor()
    c.execute("DELETE FROM warnings WHERE chat_id = ?", (message.chat.id,))
    conn.commit()
    conn.close()
    await message.reply("‚úÖ –í—Å–µ –≤–∞—Ä–Ω—ã –≤ —ç—Ç–æ–º —á–∞—Ç–µ —Å–±—Ä–æ—à–µ–Ω—ã")


@router.message(
    Command(commands=["setup"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_setup(message: Message):
    """
    –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç —á–∞—Ç –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å‚Äì—á–∞—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥—ã !setup
    """
    chat_id = message.chat.id
    user_id = message.from_user.id
    chat_title = message.chat.title or f"chat_{chat_id}"
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–∞–º —á–∞—Ç –≤ –±–∞–∑—É (–µ—Å–ª–∏ –µ—â—ë –Ω–µ—Ç)
    add_chat(chat_id, chat_title)
    # –î–æ–±–∞–≤–ª—è–µ–º —Å–≤—è–∑—å ¬´–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —á–∞—Ç¬ª, —Ç–µ–ø–µ—Ä—å —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –Ω–∞–∑–≤–∞–Ω–∏—è
    add_user_chat(user_id, chat_id, chat_title)
    await message.reply(f"‚úÖ –ß–∞—Ç ¬´{chat_title}¬ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –≤–∞—à —Å–ø–∏—Å–æ–∫ ¬´–ú–æ–∏ —á–∞—Ç—ã¬ª")

# 7) –í—ã–≤–æ–¥ –ø—Ä–∞–≤–∏–ª –∫–æ–º–∞–Ω–¥–æ–π /rules –∏–ª–∏ !rules
@router.message(
    Command(commands=["rules"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_show_rules(message: Message):
    chat_id = message.chat.id
    rules = get_rules(chat_id)
    if not rules:
        await message.reply("‚ùó –ü—Ä–∞–≤–∏–ª–∞ –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞ –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω—ã.")
    else:
        await message.reply(f"üìú <b>–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:</b>\n{rules}", parse_mode="HTML")

# /setwelcomedelete <—Å–µ–∫—É–Ω–¥> ‚Äî –∑–∞–¥–∞—ë—Ç —Ç–∞–π–º–∞—É—Ç –∞–≤—Ç–æ‚Äë—É–¥–∞–ª–µ–Ω–∏—è
@router.message(
    Command(commands=["setwelcomedelete"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_set_welcome_delete(message: Message):
    if not await is_chat_admin(message):
        return await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç.")
    parts = message.text.split()
    if len(parts) < 2:
        return await message.reply("‚ùó –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (0 ‚Äî –æ—Ç–∫–ª—é—á–∏—Ç—å).")
    try:
        t = int(parts[1])
        if t < 0:
            raise ValueError
    except ValueError:
        return await message.reply("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ ‚â• 0.")
    set_welcome_delete_timeout(message.chat.id, t)
    if t == 0:
        await message.reply("‚úÖ –ê–≤—Ç–æ‚Äë—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
    else:
        await message.reply(f"‚úÖ –ê–≤—Ç–æ‚Äë—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {t} —Å–µ–∫—É–Ω–¥.")

# /getwelcomedelete ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É
@router.message(
    Command(commands=["getwelcomedelete"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_get_welcome_delete(message: Message):
    if not await is_chat_admin(message):
        return await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç.")
    t = get_welcome_delete_timeout(message.chat.id)
    if t is None:
        t = WELCOME_DELETE_DEFAULT
        await message.reply(f"–¢–∞–π–º–∞—É—Ç –Ω–µ –∑–∞–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–µ—Ñ–æ–ª—Ç: {t} —Å–µ–∫—É–Ω–¥.")
    elif t == 0:
        await message.reply("–ê–≤—Ç–æ‚Äë—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è **–æ—Ç–∫–ª—é—á–µ–Ω–æ**.")
    else:
        await message.reply(f"–ê–≤—Ç–æ‚Äë—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è: {t} —Å–µ–∫—É–Ω–¥.")


@router.message(
    Command(commands=["setkw"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_add_keyword(message: Message):
    if not await is_chat_admin(message):
        return await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.")
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        return await message.reply("‚ùó –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã.\n–ü—Ä–∏–º–µ—Ä: `/setkw —Å–ø–æ–π–ª–µ—Ä`", parse_mode="Markdown")
    kw = parts[1].strip().lower()
    add_keyword(message.chat.id, kw)
    await message.reply(f"‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ ¬´{kw}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ñ–∏–ª—å—Ç—Ä.")

# –£–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞: /nor —Å–ø–æ–π–ª–µ—Ä
@router.message(
    Command(commands=["remfromkw"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_remove_keyword(message: Message):
    if not await is_chat_admin(message):
        return await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.")
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2 or not parts[1].strip():
        return await message.reply("‚ùó –£–∫–∞–∂–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.\n–ü—Ä–∏–º–µ—Ä: `/remfromkw —Å–ø–æ–π–ª–µ—Ä`", parse_mode="Markdown")
    kw = parts[1].strip().lower()
    remove_keyword(message.chat.id, kw)
    await message.reply(f"‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ ¬´{kw}¬ª —É–¥–∞–ª–µ–Ω–æ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞.")

# –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: /listkw
@router.message(
    Command(commands=["listkw"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_list_keywords(message: Message):
    kws = get_keywords(message.chat.id)
    if not kws:
        return await message.reply("‚ö†Ô∏è –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏ –æ–¥–Ω–æ–≥–æ –∫–ª—é—á–µ–≤–æ–≥–æ —Å–ª–æ–≤–∞.")
    await message.reply("üîë –¢–µ–∫—É—â–∏–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –≤ —Ñ–∏–ª—å—Ç—Ä–µ:\n" +
                        "\n".join(f"- {w}" for w in kws))


@router.message(
    Command(commands=["help", "commands"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_show_commands(message: Message):
    help_text = (
        "/rules ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞\n"
        "/setup ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        "/ban [@username|reply] ‚Äî –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/unban [@username|reply] ‚Äî —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/mute [@username|reply] [—á–∞—Å—ã] ‚Äî –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/unmute [@username|reply] ‚Äî —Ä–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/checkperms [@username|reply] ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/ro ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è\n"
        "/resetwarn [@username|reply] ‚Äî –æ–±–Ω—É–ª–∏—Ç—å –≤–∞—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/resetwarnsall ‚Äî –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ –≤–∞—Ä–Ω—ã –≤ —á–∞—Ç–µ\n"
        "/setwelcomedelete [—Å–µ–∫—É–Ω–¥] ‚Äî –∑–∞–¥–∞—Ç—å —Ç–∞–π–º–∞—É—Ç –∞–≤—Ç–æ‚Äë—É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è\n"
        "/getwelcomedelete ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ‚Äë—É–¥–∞–ª–µ–Ω–∏—è\n"
        "/setkw [—Å–ª–æ–≤–æ] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Ñ–∏–ª—å—Ç—Ä\n"
        "/remfromkw [—Å–ª–æ–≤–æ] ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞\n"
        "/listkw ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ Markdown, —á—Ç–æ–±—ã —É–≥–ª–æ–≤—ã–µ —Å–∫–æ–±–∫–∏ –Ω–µ –ª–æ–º–∞–ª–∏ –ø–∞—Ä—Å–µ—Ä HTML
    await message.reply(help_text, parse_mode="Markdown")


def register_handlers_aliases(dp):
    dp.include_router(router)
