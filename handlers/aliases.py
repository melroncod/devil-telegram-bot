import logging
from time import time

from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.enums import ChatType, ChatMemberStatus
from aiogram.types import Message
from loader import bot

from services.logger import send_log
from db import (
    upsert_alias,
    resolve_username,
    add_mute,
    reset_mutes,
    add_ban,
    reset_bans,
    reset_warns,
    reset_all_warns,
    add_user_chat,
    add_chat,
    set_rules,
    get_rules,
    set_welcome_delete_timeout,
    get_welcome_delete_timeout,
    get_keywords,
    add_keyword,
    remove_keyword,
    get_log_settings,
)

logger = logging.getLogger(__name__)
router = Router()
WELCOME_DELETE_DEFAULT = 60


async def is_chat_admin(message: types.Message) -> bool:
    if message.sender_chat:
        return True
    try:
        member = await bot.get_chat_member(message.chat.id, message.from_user.id)
        return member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∞: {e}")
        return False


async def _get_chat_name(chat_id: int) -> str:
    try:
        chat = await bot.get_chat(chat_id)
        return chat.title or str(chat_id)
    except:
        return str(chat_id)


async def get_target_user(message: types.Message, username: str | None = None) -> types.User | None:
    chat_id = message.chat.id
    if message.reply_to_message:
        target = message.reply_to_message.from_user
        if target and target.username:
            upsert_alias(chat_id, target.username, target.id)
        return target

    if not message.from_user and username:
        target_id = resolve_username(chat_id, username.lstrip('@').lower())
        if target_id:
            try:
                return (await bot.get_chat_member(chat_id, target_id)).user
            except:
                return None
        return None

    if username:
        target_id = resolve_username(chat_id, username.lstrip('@').lower())
        if target_id:
            try:
                return (await bot.get_chat_member(chat_id, target_id)).user
            except:
                pass
        try:
            member = await bot.get_chat_member(chat_id, username)
            user = member.user
            if user.username:
                upsert_alias(chat_id, user.username, user.id)
            return user
        except:
            return None

    return None


async def process_admin_command(message: types.Message, command_type: str) -> None:
    sender = message.from_user.id if message.from_user else "anon_admin"
    logger.info(f"Process command {command_type} by {sender}: {message.text}")

    if not await is_chat_admin(message):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã —á–∞—Ç–∞ –º–æ–≥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É")
        return

    parts = message.text.split()
    username_arg = parts[1] if len(parts) > 1 else None
    target = await get_target_user(message, username_arg)
    if not target:
        await message.reply("‚ùó –û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ @username (–∏–ª–∏ ID)")
        return

    chat_id = message.chat.id
    chat_name = await _get_chat_name(chat_id)

    try:
        member = await bot.get_chat_member(chat_id, target.id)
        if member.status in [ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.CREATOR]:
            await message.reply("‚ùó –ù–µ–ª—å–∑—è –≤–æ–∑–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞")
            return

        # BAN
        if command_type == "ban":
            await bot.ban_chat_member(chat_id, target.id)
            add_ban(target.id, chat_id, target.username or target.full_name)
            await message.reply(f"‚úÖ @{target.username or target.first_name} –∑–∞–±–∞–Ω–µ–Ω")
            await send_log(
                bot, chat_id,
                f"üî® ban: @{target.username or target.first_name} (#{target.id}) "
                f"–∑–∞–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º {message.from_user.full_name} –≤ ¬´{chat_name}¬ª"
            )

        # UNBAN
        elif command_type == "unban":
            await bot.unban_chat_member(chat_id, target.id)
            reset_bans(target.id, chat_id)
            await message.reply(f"‚úÖ @{target.username or target.first_name} —Ä–∞–∑–±–∞–Ω–µ–Ω")
            await send_log(
                bot, chat_id,
                f"üîì unban: @{target.username or target.first_name} (#{target.id}) "
                f"—Ä–∞–∑–±–∞–Ω–µ–Ω –∞–¥–º–∏–Ω–æ–º {message.from_user.full_name} –≤ ¬´{chat_name}¬ª"
            )

        # MUTE
        elif command_type == "mute":
            restriction = 300
            if len(parts) > 2:
                try:
                    restriction = int(parts[2]) * 3600
                except ValueError:
                    await message.reply("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –£–∫–∞–∂–∏—Ç–µ —á–∏—Å–ª–æ —á–∞—Å–æ–≤.")
                    return

            await bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=target.id,
                permissions=types.ChatPermissions(can_send_messages=False),
                until_date=int(time()) + restriction
            )
            add_mute(target.id, chat_id, target.username or target.full_name)
            period = f"{parts[2]} —á" if len(parts) > 2 else "–Ω–∞–≤—Å–µ–≥–¥–∞"
            await message.reply(f"‚úÖ @{target.username or target.first_name} –∑–∞–º—É—á–µ–Ω {period}")
            await send_log(
                bot, chat_id,
                f"üîá mute: @{target.username or target.first_name} (#{target.id}) "
                f"–∑–∞–º—É—á–µ–Ω {period} –∞–¥–º–∏–Ω–æ–º {message.from_user.full_name} –≤ ¬´{chat_name}¬ª"
            )

        # UNMUTE
        elif command_type == "unmute":
            await bot.restrict_chat_member(
                chat_id=chat_id,
                user_id=target.id,
                permissions=types.ChatPermissions(
                    can_send_messages=True,
                    can_send_media_messages=True,
                    can_send_other_messages=True,
                    can_add_web_page_previews=True
                )
            )
            reset_mutes(target.id, chat_id)
            await message.reply(f"‚úÖ @{target.username or target.first_name} —Ä–∞–∑–º—É—á–µ–Ω")
            await send_log(
                bot, chat_id,
                f"üîä unmute: @{target.username or target.first_name} (#{target.id}) "
                f"—Ä–∞–∑–º—É—á–µ–Ω –∞–¥–º–∏–Ω–æ–º {message.from_user.full_name} –≤ ¬´{chat_name}¬ª"
            )

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ process_admin_command: {e}")
        await message.reply(f"‚ùó –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}")


PREFIXES = ("/", "!")


@router.message(
    Command(commands=["ban", "–±–∞–Ω"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_ban(message: types.Message):
    await process_admin_command(message, "ban")


@router.message(
    Command(commands=["unban"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_unban(message: types.Message):
    await process_admin_command(message, "unban")


@router.message(
    Command(commands=["mute"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_mute(message: types.Message):
    await process_admin_command(message, "mute")


@router.message(
    Command(commands=["unmute"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_unmute(message: types.Message):
    await process_admin_command(message, "unmute")


@router.message(
    Command(commands=["ro"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_ro(message: types.Message):
    if not await is_chat_admin(message):
        await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç.")
        return

    chat_id = message.chat.id
    chat_name = await _get_chat_name(chat_id)

    chat = await bot.get_chat(chat_id)
    current = chat.permissions or types.ChatPermissions(
        can_send_messages=True,
        can_send_media_messages=True,
        can_send_other_messages=True,
        can_add_web_page_previews=True
    )
    ro_enabled = not current.can_send_messages
    perms = types.ChatPermissions(
        can_send_messages=ro_enabled,
        can_send_media_messages=ro_enabled,
        can_send_other_messages=ro_enabled,
        can_add_web_page_previews=ro_enabled
    )
    status = "–≤—ã–∫–ª—é—á–µ–Ω" if ro_enabled else "–≤–∫–ª—é—á–µ–Ω"
    await bot.set_chat_permissions(chat_id=chat_id, permissions=perms)
    await message.reply(f"‚úÖ Read-Only —Ä–µ–∂–∏–º {status}")
    await send_log(
        bot, chat_id,
        f"üëÅÔ∏è ro: —Ä–µ–∂–∏–º —á—Ç–µ–Ω–∏—è {status} –∞–¥–º–∏–Ω–æ–º {message.from_user.full_name} –≤ ¬´{chat_name}¬ª"
    )


@router.message(
    Command(commands=["resetwarn"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_resetwarn(message: types.Message):
    if not await is_chat_admin(message):
        return await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç.")
    target = await get_target_user(message)
    if not target:
        return await message.reply("‚ùó –û—Ç–≤–µ—Ç—å—Ç–µ –∏–ª–∏ —É–∫–∞–∂–∏—Ç–µ @username")
    reset_warns(target.id, message.chat.id)
    chat_id = message.chat.id
    chat_name = await _get_chat_name(chat_id)
    display = target.username or target.full_name
    await message.reply(f"‚úÖ –í–∞—Ä–Ω—ã @{display} –æ–±–Ω—É–ª–µ–Ω—ã")
    await send_log(
        bot, message.chat.id,
        f"‚ôªÔ∏è resetwarn: @{display} (#{target.id}) –æ–±–Ω—É–ª–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º {message.from_user.full_name} –≤ ¬´{chat_name}¬ª"
    )


@router.message(
    Command(commands=["resetwarnsall"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_resetwarnsall(message: types.Message):
    if not await is_chat_admin(message):
        return await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç.")
    try:
        reset_all_warns(message.chat.id)
        chat_id = message.chat.id
        chat_name = await _get_chat_name(chat_id)
        await message.reply("‚úÖ –í—Å–µ –≤–∞—Ä–Ω—ã —Å–±—Ä–æ—à–µ–Ω—ã")
        await send_log(
            bot, message.chat.id,
            f"‚ôªÔ∏è resetwarnsall: –≤—Å–µ –≤–∞—Ä–Ω—ã —Å–±—Ä–æ—à–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º {message.from_user.full_name} –≤ ¬´{chat_name}¬ª"
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ –≤—Å–µ—Ö –≤–∞—Ä–Ω–æ–≤: {e}")
        await message.reply(f"‚ùó –ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å –≤–∞—Ä–Ω—ã: {e}")


@router.message(
    Command(commands=["setup"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_setup(message: types.Message):
    chat_id = message.chat.id
    user_id = message.from_user.id if message.from_user else None
    if user_id is None:
        return
    chat_title = message.chat.title or f"chat_{chat_id}"
    add_chat(chat_id, chat_title)
    chat_id = message.chat.id
    chat_name = await _get_chat_name(chat_id)
    add_user_chat(user_id, chat_id, chat_title)
    await message.reply(f"‚úÖ –ß–∞—Ç ¬´{chat_title}¬ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω")
    await send_log(
        bot, chat_id,
        f"üõ†Ô∏è setup: —á–∞—Ç ¬´{chat_title}¬ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.full_name} –≤ ¬´{chat_name}¬ª"
    )


@router.message(
    Command(commands=["rules"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_show_rules(message: types.Message):
    chat_id = message.chat.id
    rules = get_rules(chat_id)
    if not rules:
        await message.reply("‚ùó –ü—Ä–∞–≤–∏–ª–∞ –µ—â—ë –Ω–µ –∑–∞–¥–∞–Ω—ã.")
    else:
        await message.reply(f"üìú <b>–ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞:</b>\n{rules}", parse_mode="HTML")


@router.message(
    Command(commands=["setwelcomedelete"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_set_welcome_delete(message: types.Message):
    if not await is_chat_admin(message):
        return await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç.")
    parts = message.text.split()
    if len(parts) < 2:
        return await message.reply("‚ùó –£–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö.")
    try:
        t = int(parts[1]);
        if t < 0: raise ValueError
    except:
        return await message.reply("‚ùó –ù—É–∂–Ω–æ —Ü–µ–ª–æ–µ ‚â• 0.")
    set_welcome_delete_timeout(message.chat.id, t)
    chat_id = message.chat.id
    chat_name = await _get_chat_name(chat_id)
    text = "–æ—Ç–∫–ª—é—á–µ–Ω–æ" if t == 0 else f"{t} —Å–µ–∫"
    await message.reply(f"‚úÖ –ê–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è {text}")
    await send_log(
        bot, message.chat.id,
        f"‚è±Ô∏è setwelcomedelete: {text} –∞–¥–º–∏–Ω–æ–º {message.from_user.full_name} –≤ ¬´{chat_name}¬ª"
    )


@router.message(
    Command(commands=["getwelcomedelete"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_get_welcome_delete(message: types.Message):
    if not await is_chat_admin(message):
        return await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç.")
    t = get_welcome_delete_timeout(message.chat.id)
    if t is None:
        t = WELCOME_DELETE_DEFAULT
        await message.reply(f"–î–µ—Ñ–æ–ª—Ç: {t} —Å–µ–∫.")
    elif t == 0:
        await message.reply("–ê–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ.")
    else:
        await message.reply(f"–ê–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏–µ: {t} —Å–µ–∫.")


@router.message(
    Command(commands=["setkw"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_add_keyword(message: types.Message):
    if not await is_chat_admin(message):
        return await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç.")
    parts = message.text.split(maxsplit=1)
    if len(parts)<2 or not parts[1].strip():
        return await message.reply("‚ùó –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ.", parse_mode="Markdown")
    kw = parts[1].strip().lower()
    add_keyword(message.chat.id, kw)
    chat_id = message.chat.id
    chat_name = await _get_chat_name(chat_id)
    await message.reply(f"‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ ¬´{kw}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–æ")
    await send_log(
        bot, message.chat.id,
        f"üîë setkw: ¬´{kw}¬ª –¥–æ–±–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º {message.from_user.full_name} –≤ ¬´{chat_name}¬ª"
    )


@router.message(
    Command(commands=["remfromkw"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_remove_keyword(message: types.Message):
    if not await is_chat_admin(message):
        return await message.reply("‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—ã –º–æ–≥—É—Ç.")
    parts = message.text.split(maxsplit=1)
    if len(parts)<2 or not parts[1].strip():
        return await message.reply("‚ùó –£–∫–∞–∂–∏—Ç–µ —Å–ª–æ–≤–æ.", parse_mode="Markdown")
    kw = parts[1].strip().lower()
    remove_keyword(message.chat.id, kw)
    chat_id = message.chat.id
    chat_name = await _get_chat_name(chat_id)
    await message.reply(f"‚úÖ –ö–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ ¬´{kw}¬ª —É–¥–∞–ª–µ–Ω–æ")
    await send_log(
        bot, message.chat.id,
        f"‚ùå remfromkw: ¬´{kw}¬ª —É–¥–∞–ª–µ–Ω–æ –∞–¥–º–∏–Ω–æ–º {message.from_user.full_name} –≤ ¬´{chat_name}¬ª"
    )


@router.message(
    Command(commands=["listkw"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_list_keywords(message: types.Message):
    kws = get_keywords(message.chat.id)
    if not kws:
        return await message.reply("‚ö†Ô∏è –ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.")
    await message.reply("üîë Keywords:\n" + "\n".join(f"- {w}" for w in kws))


@router.message(
    Command(commands=["help", "commands"], prefix=PREFIXES, ignore_mention=True, ignore_case=True),
    F.chat.type.in_([ChatType.GROUP, ChatType.SUPERGROUP])
)
async def cmd_show_commands(message: types.Message):
    help_text = (
        "/rules ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞\n"
        "/setup ‚Äî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —á–∞—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è\n"
        "/ban [@username|reply] ‚Äî –∑–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/unban [@username|reply] ‚Äî —Ä–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/mute [@username|reply] [—á–∞—Å—ã] ‚Äî –∑–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/unmute [@username|reply] ‚Äî —Ä–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/checkperms [@username|reply] ‚Äî –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/ro ‚Äî –ø–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ä–µ–∂–∏–º —Ç–æ–ª—å–∫–æ –¥–ª—è —á—Ç–µ–Ω–∏—è\n"
        "/resetwarn [@username|reply] ‚Äî –æ–±–Ω—É–ª–∏—Ç—å –≤–∞—Ä–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
        "/resetwarnsall ‚Äî –æ–±–Ω—É–ª–∏—Ç—å –≤—Å–µ –≤–∞—Ä–Ω—ã –≤ —á–∞—Ç–µ\n"
        "/setwelcomedelete [—Å–µ–∫—É–Ω–¥] ‚Äî –∑–∞–¥–∞—Ç—å —Ç–∞–π–º–∞—É—Ç –∞–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è\n"
        "/getwelcomedelete ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∞–≤—Ç–æ-—É–¥–∞–ª–µ–Ω–∏—è\n"
        "/setkw [—Å–ª–æ–≤–æ] ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ —Ñ–∏–ª—å—Ç—Ä\n"
        "/remfromkw [—Å–ª–æ–≤–æ] ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –∏–∑ —Ñ–∏–ª—å—Ç—Ä–∞\n"
        "/listkw ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"
    )
    await message.reply(help_text, parse_mode="Markdown")


def register_handlers_aliases(dp):
    dp.include_router(router)